{"ast":null,"code":"var _jsxFileName = \"/Users/vanessaaristizabal/development/react-projects/taller-comfeco/react-bootstrap/src/container/Profile/components/Events/Events.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Badge, Button, Card } from \"react-bootstrap\";\nimport ConfirmationModal from \"./../../../../components/Modal/ConfirmationModal\";\nimport ModalComponent from \"./../../../../components/Modal/Modal\";\nimport \"./Events.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://run.mocky.io/v3/4c755975-6142-459a-9bb8-2cc37efadb7e\";\n\nconst Events = ({\n  userEvents\n}) => {\n  _s();\n\n  const [eventList, setEventList] = useState([]);\n  const [show, setShow] = useState(false);\n  const [idToConfirm, setIdToConfirm] = useState('');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n\n  const checkJoinedGEvents = () => {\n    const joinedEvents = eventList.filter(({\n      join\n    }) => join === true); // const data =  JSON.parse(sessionStorage.getItem('user'));\n    // data.events = joinedEvents;\n\n    userEvents(joinedEvents); //sessionStorage.setItem('user', JSON.stringify(data));\n  };\n\n  const loadData = async () => {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    setEventList(data);\n    checkJoinedGEvents();\n  };\n\n  useEffect(() => {\n    loadData();\n    return () => {};\n  }, []);\n\n  const handleEvents = (value, state) => {\n    const newArray = eventList.map(values => {\n      if (values.id === value) {\n        values.join = state;\n      }\n\n      return values;\n    });\n    setEventList(newArray);\n    checkJoinedGEvents();\n  };\n\n  const handleModel = id => {\n    handleEvents(id, true);\n    setShow(true);\n  };\n\n  const handleConfirmation = () => {\n    setShowConfirmation(false);\n    handleEvents(idToConfirm, false);\n  };\n\n  const handleModelConfirmation = id => {\n    setShowConfirmation(true);\n    setIdToConfirm(id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"events\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"events__title\",\n      children: \"Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"events__cards\",\n      children: eventList.map(({\n        image,\n        id,\n        name,\n        join\n      }, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            className: \"card__img\",\n            src: image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"event-name\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this), join && /*#__PURE__*/_jsxDEV(Badge, {\n              variant: \"primary\",\n              children: \"joined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 26\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [!join && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                onClick: () => handleModel(id),\n                children: \"Join\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, this), join && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"secondary\",\n                onClick: () => handleModelConfirmation(id),\n                children: \"Abandon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n          show: showConfirmation,\n          onClose: () => setShowConfirmation(false),\n          handleConfirmation: handleConfirmation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalComponent, {\n      show: show,\n      onClose: () => setShow(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Events, \"IluhiiV5Zh0LJNtqALLaTqFixAQ=\");\n\n_c = Events;\nexport default Events;\n\nvar _c;\n\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"sources":["/Users/vanessaaristizabal/development/react-projects/taller-comfeco/react-bootstrap/src/container/Profile/components/Events/Events.js"],"names":["useEffect","useState","Badge","Button","Card","ConfirmationModal","ModalComponent","API_URL","Events","userEvents","eventList","setEventList","show","setShow","idToConfirm","setIdToConfirm","showConfirmation","setShowConfirmation","checkJoinedGEvents","joinedEvents","filter","join","loadData","response","fetch","data","json","handleEvents","value","state","newArray","map","values","id","handleModel","handleConfirmation","handleModelConfirmation","image","name","index"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Badge, Button, Card } from \"react-bootstrap\";\nimport ConfirmationModal from \"./../../../../components/Modal/ConfirmationModal\";\nimport ModalComponent from \"./../../../../components/Modal/Modal\";\nimport \"./Events.scss\";\n\nconst API_URL = \"https://run.mocky.io/v3/4c755975-6142-459a-9bb8-2cc37efadb7e\";\n\nconst Events = ({userEvents}) => {\n  const [eventList, setEventList] = useState([]);\n  const [show, setShow] = useState(false);\n  const [idToConfirm, setIdToConfirm] = useState('');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n\n  const checkJoinedGEvents = () => {\n    const joinedEvents = eventList.filter( ({join}) => join === true);\n    // const data =  JSON.parse(sessionStorage.getItem('user'));\n    // data.events = joinedEvents;\n    userEvents(joinedEvents);\n    //sessionStorage.setItem('user', JSON.stringify(data));\n  };\n\n  const loadData = async () => {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    setEventList(data);\n    checkJoinedGEvents();\n  };\n\n  useEffect(() => {\n    loadData();\n    return () => {};\n  }, []);\n\n  const handleEvents = (value, state) => {\n    const newArray = eventList.map((values) => {\n      if (values.id === value) {\n        values.join = state;\n      }\n      return values;\n    });\n    setEventList(newArray);\n    checkJoinedGEvents();\n  };\n\n  const handleModel = (id) => {\n    handleEvents(id, true);\n    setShow(true);\n  };\n\n  const handleConfirmation = () => {\n    setShowConfirmation(false);\n    handleEvents(idToConfirm, false);\n  };\n\n  const handleModelConfirmation = (id) => {\n    setShowConfirmation(true);\n    setIdToConfirm(id);\n  };\n\n  return (\n    <section className=\"events\">\n      <h3 className=\"events__title\">Events</h3>\n      <div className=\"events__cards\">\n        {eventList.map(({ image, id, name, join }, index) => (\n          <>\n            <Card key={index}>\n              <Card.Img className=\"card__img\" src={image} />\n              <Card.Body>\n                <h4 className=\"event-name\">{name}</h4>\n                {join && <Badge variant=\"primary\">joined</Badge>}\n                <div>\n                  {!join && (\n                    <Button variant=\"secondary\" onClick={() => handleModel(id)}>\n                      Join\n                    </Button>\n                  )}\n                  {join && (\n                    <Button\n                      variant=\"secondary\"\n                      onClick={() => handleModelConfirmation(id)}\n                    >\n                      Abandon\n                    </Button>\n                  )}\n                </div>\n              </Card.Body>\n            </Card>\n            <ConfirmationModal\n              show={showConfirmation}\n              onClose={() => setShowConfirmation(false)}\n              handleConfirmation={handleConfirmation}\n            />\n          </>\n        ))}\n      </div>\n      <ModalComponent show={show} onClose={() => setShow(false)} />\n    </section>\n  );\n};\n\nexport default Events;\n"]},"metadata":{},"sourceType":"module"}